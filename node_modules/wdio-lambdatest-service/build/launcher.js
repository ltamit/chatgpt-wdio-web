"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _formData = _interopRequireDefault(require("form-data"));
var _fs = _interopRequireDefault(require("fs"));
var _axios = _interopRequireDefault(require("axios"));
var _perf_hooks = require("perf_hooks");
var _logger = _interopRequireDefault(require("@wdio/logger"));
var _nodeTunnel = _interopRequireDefault(require("@lambdatest/node-tunnel"));
var _constants = require("./constants.js");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const log = (0, _logger.default)('@wdio/lambdatest-service');
const colors = require('colors');
class LambdaTestLauncher {
  constructor(options) {
    _defineProperty(this, "lambdatestTunnelProcess", void 0);
    _defineProperty(this, "options", void 0);
    this.options = options;
  }
  async onPrepare(config, capabilities) {
    if (this.options.app_upload) {
      try {
        var _this$options$app, _this$options$app$app, _this$options$app2, _this$options$app$app2, _this$options$app3, _this$options$app$cus, _this$options$app4;
        const appName = (_this$options$app = this.options.app) === null || _this$options$app === void 0 ? void 0 : _this$options$app.app_name;
        if (!appName) throw new Error(colors.yellow('App name is missing.\n'));
        const appPath = (_this$options$app$app = (_this$options$app2 = this.options.app) === null || _this$options$app2 === void 0 ? void 0 : _this$options$app2.app_path) !== null && _this$options$app$app !== void 0 ? _this$options$app$app : null;
        const appUrl = (_this$options$app$app2 = (_this$options$app3 = this.options.app) === null || _this$options$app3 === void 0 ? void 0 : _this$options$app3.app_url) !== null && _this$options$app$app2 !== void 0 ? _this$options$app$app2 : null;
        const customId = (_this$options$app$cus = (_this$options$app4 = this.options.app) === null || _this$options$app4 === void 0 ? void 0 : _this$options$app4.custom_id) !== null && _this$options$app$cus !== void 0 ? _this$options$app$cus : null;
        let data = new _formData.default();
        data.append('name', appName);
        data.append(appPath !== null ? 'appFile' : 'url', appPath !== null ? _fs.default.createReadStream(appPath) : appUrl);
        data.append('custom_id', customId);
        let headerEnv = `Basic ${Buffer.from(config.user + ':' + config.key).toString('base64')}`;
        let body = {
          method: 'post',
          maxBodyLength: Infinity,
          url: 'https://manual-api.lambdatest.com/app/upload/realDevice',
          headers: {
            'Authorization': headerEnv,
            ...data.getHeaders()
          },
          data: data
        };
        const response = await _axios.default.request(body);
        console.log(colors.green(JSON.stringify(response.data)));
        const envAppUrl = response.data.app_url;
        if (this.options.app.enableCapability) {
          for (let i = 0; i < capabilities.length; i++) {
            capabilities[i].app = envAppUrl;
          }
        }
        const appId = response.data.app_id;
        if (appPath && appPath.includes('.apk') || appUrl && appUrl.includes('.apk')) {
          await checkPatchUrl(appId, headerEnv);
        }
      } catch (error) {
        console.error(error.message);
      }
    }
    if (!this.options.tunnel) {
      return;
    }
    const tunnelArguments = {
      user: config.user,
      key: config.key,
      ...this.options.lambdatestOpts
    };
    this.lambdatestTunnelProcess = new _nodeTunnel.default();
    if (Array.isArray(capabilities)) {
      capabilities.forEach(capability => {
        if (capability['LT:Options'] === undefined) capability.tunnel = true;else capability['LT:Options'].tunnel = true;
      });
    } else if (typeof capabilities === 'object') {
      if (capabilities['LT:Options'] === undefined) capabilities.tunnel = true;else capabilities['LT:Options'].tunnel = true;
    }
    const obs = new _perf_hooks.PerformanceObserver(list => {
      const entry = list.getEntries()[0];
      log.info(`LambdaTest Tunnel successfully started after ${entry.duration}ms`);
    });
    obs.observe({
      entryTypes: ['measure'],
      buffered: false
    });
    let timer;
    _perf_hooks.performance.mark('ltTunnelStart');
    return Promise.race([new Promise((resolve, reject) => {
      this.lambdatestTunnelProcess.start(tunnelArguments, err => {
        if (err) {
          obs.disconnect();
          return reject(err);
        }
        this.lambdatestTunnelProcess.getTunnelName(tunnelName => {
          if (Array.isArray(capabilities)) {
            capabilities.forEach(capability => {
              if (capability['LT:Options'] === undefined) capability.tunnelName = tunnelName;else capability['LT:Options'].tunnelName = tunnelName;
            });
          } else if (typeof capabilities === 'object') {
            if (capabilities['LT:Options'] === undefined) capabilities.tunnelName = tunnelName;else capabilities['LT:Options'].tunnelName = tunnelName;
          }
          obs.disconnect();
          resolve();
        });
      });
    }), new Promise((resolve, reject) => {
      timer = setTimeout(() => {
        obs.disconnect();
        reject(new Error(_constants.TUNNEL_START_FAILED));
      }, _constants.TUNNEL_STOP_TIMEOUT);
    })]).then(result => {
      clearTimeout(timer);
      _perf_hooks.performance.mark('ltTunnelEnd');
      _perf_hooks.performance.measure('bootTime', 'ltTunnelStart', 'ltTunnelEnd');
      obs.disconnect();
      return Promise.resolve(result);
    }, err => {
      clearTimeout(timer);
      obs.disconnect();
      return Promise.reject(err);
    });
  }
  onComplete() {
    if (!this.lambdatestTunnelProcess || typeof this.lambdatestTunnelProcess.isRunning !== 'function' || !this.lambdatestTunnelProcess.isRunning()) {
      return;
    }
    let timer;
    return Promise.race([new Promise((resolve, reject) => {
      this.lambdatestTunnelProcess.stop(err => {
        if (err) return reject(err);
        resolve();
      });
    }), new Promise((resolve, reject) => {
      timer = setTimeout(() => reject(new Error(_constants.TUNNEL_STOP_FAILED)), _constants.TUNNEL_STOP_TIMEOUT);
    })]).then(() => {
      clearTimeout(timer);
      return Promise.resolve();
    }, err => {
      clearTimeout(timer);
      return Promise.reject(err);
    });
  }
}
exports.default = LambdaTestLauncher;
async function checkPatchUrl(appId, headerEnv) {
  let config = {
    method: 'get',
    maxBodyLength: Infinity,
    url: `https://manual-api.lambdatest.com/app/${appId}/url?reinstall=true`,
    headers: {
      'Authorization': headerEnv
    }
  };
  let isLoaded = false;
  while (!isLoaded) {
    try {
      const response = await _axios.default.request(config);
      const patchedUrl = response.data.patched_url;
      if (patchedUrl !== null) {
        isLoaded = true;
        break;
      }
      console.log('Waiting for app to be loaded...');
    } catch (error) {
      console.error('Error occurred:', error.message);
    }
    await new Promise(resolve => setTimeout(resolve, 15000));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,